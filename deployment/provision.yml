- hosts: localhost
  vars_prompt:
    - name: stage
      private: no
      default: staging
  tasks:
    - name: include vars of vars.yml
      include_vars:
        file: vars.yml

    - name: Gather facts about all tags
      digital_ocean_tag_facts:
        api_token: "{{ api_token }}"
      register: 'droplets'
    - debug: var=droplets
    - set_fact:
        resources: "{{ item.resources }}"
      with_items: "{{ droplets.data | json_query(name) }}"
      vars:
        name: "[?name=='{{ project }}-{{ stage }}']"
    - name: Collect hosts
      add_host: hostname={{ resources.droplets.last_tagged.networks.v4[0].ip_address }} groups=droplets ansible_user=root

- hosts: droplets
  remote_user: root
  gather_facts: False
  tasks:
    - name: install python 2
      raw: test -e /usr/bin/python || (apt -y update && apt install -y python-minimal)
      become: yes     

- hosts: droplets
  remote_user: root
  vars:
    logrotate_scripts:
      - name: rails
        path: "/busix/current/log/*.log"
        options:
          - weekly
          - size 25M
          - missingok
          - compress
          - delaycompress
          - copytruncate

  vars_prompt:
    - name: domain
      private: no
      default: krak√≥w.online
  roles:
    - ansible-logrotate
  handlers:
    - name: nginx restart
      become: yes
      service:
        name: nginx
        state: restarted
    - name: reload systemctl
      become: yes
      command: systemctl daemon-reload
    - name: restart puma
      become: yes
      service:
        name: puma
        enabled: yes
        state: restarted
    - name: restart sidekiq
      become: yes
      service:
        name: sidekiq
        enabled: yes
        state: restarted
  tasks:
    - name: include vars of vars.yml
      include_vars:
        file: vars.yml

    - name: Create swap file
      command: fallocate -l 2G {{ swap_file_path }}
               creates="{{ swap_file_path }}"

    - name: Change swap file permissions
      file: path="{{ swap_file_path }}"
            owner=root
            group=root
            mode=0600

    - name: "Check swap file type"
      command: file {{ swap_file_path }}
      register: swapfile

    - name: Make swap file
      command: "sudo mkswap {{ swap_file_path }}"
      when: swapfile.stdout.find('swap file') == -1

    - name: Write swap entry in fstab
      mount: name=none
             src={{ swap_file_path }}
             fstype=swap
             opts=sw
             passno=0
             dump=0
             state=present

    - name: Mount swap
      command: "swapon {{ swap_file_path }}"
      when: ansible_swaptotal_mb < 1

    - name: set timezone to Europe/Warsaw
      timezone:
        name: Europe/Warsaw

    - name: Creates project path
      become: yes
      file:
        path: /{{ project }}
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"

    - name: create /etc/profile.d/busix file
      become: yes
      template:
        src: templates/.env.local.j2
        dest: /etc/profile.d/{{ project }}.local.sh
      vars:
        env:
          REDIS_URL: "redis://{{redis_bind}}:6379/0"
          DATABASE_URL: "postgis://postgres:{{ pg_password }}@localhost:5432/{{ project }}_{{ stage }}"
          RAILS_ENV: "{{ stage }}"

    - name: Modify bashrc
      become: yes
      template:
        src: .bashrc.j2
        dest: ~/.bashrc

    - name: Create puma.service
      become: yes
      template:
        src: ./lib/systemd/system/puma.service.j2
        dest: /lib/systemd/system/puma.service
      notify:
        - reload systemctl
        - restart puma

    - name: Create sidekiq.service
      become: yes
      template:
        src: ./lib/systemd/system/sidekiq.service.j2
        dest: /lib/systemd/system/sidekiq.service
      notify:
        - reload systemctl
        - restart sidekiq

    - name: 'install DO agent'
      raw: 'curl -sSL https://agent.digitalocean.com/install.sh | sh'

    - name: Update APT cache
      become: yes
      apt: update_cache=true
    - name: Install PostgreSQL
      include_role:
        name: geerlingguy.postgresql
      vars:
        ansible_become: yes
        ansible_no_log: no
        postgresql_version: "10.4"
        postgresql_data_dir: "/var/lib/postgresql/10/main"
        postgresql_bin_path: "/usr/lib/postgresql/10/bin"
        postgresql_config_path: "/etc/postgresql/10/main"
        postgresql_packages:
          - postgresql-10
          - postgresql-contrib-10
          - libpq-dev
        postgresql_hba_entries:
          - { type: local, database: all, user: postgres, auth_method: peer }
          - { type: local, database: all, user: all, auth_method: peer }
          - { type: host, database: all, user: all, address: '127.0.0.1/32', auth_method: md5 }
          - { type: host, database: all, user: all, address: '::1/128', auth_method: md5 }
        postgresql_databases:
          - name: "{{ project }}_{{ stage }}"
    - name: 'Configure postgresql user'
      become: yes
      become_user: "postgres"
      postgresql_user:
        name: "postgres"
        password: "{{ pg_password }}"
        db: "{{ project }}_{{ stage }}"
        state: "present"
        encrypted: yes

    - name: Install postgis
      become: yes
      apt: name=postgis state=present

    - name: install redis
      include_role:
        name: DavidWittman.redis
      vars:
        redis_version: 4.0.10
        ansible_become: yes

    - name: install nginx
      include_role:
        name: geerlingguy.nginx
      vars:
        ansible_become: yes
        nginx_remove_default_vhost: true
        nginx_vhosts:
          - server_name: "{{ domain }}"
            root: "/{{ project }}/current/public"
            access_log: "/var/log/nginx/{{ project }}.access.log"
            error_log: "/var/log/nginx/{{ project }}.error.log"
            extra_parameters: |
              location / {
                try_files $uri @{{ project }};
              }
              location @{{ project }} {
                proxy_set_header Host $host;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_pass http://{{ project }};
              }
        nginx_upstreams:
          - name: "{{ project }}"
            servers:
              - "unix:///{{ project }}/shared/tmp/sockets/puma.sock fail_timeout=0"

    - name: Install git
      become: yes
      apt: name=git state=present

    - name: Install libgeos-dev
      become: yes
      apt: name=libgeos-dev state=present

    - name: Install libgeos-3.6.2
      become: yes
      apt: name=libgeos-3.6.2 state=present

    - name: Install libproj12
      become: yes
      apt: name=libproj12 state=present

    - name: Install libproj-dev
      become: yes
      apt: name=libproj-dev state=present

    - name: Install ruby
      include_role:
        name: geerlingguy.ruby
      vars:
        ansible_become: yes
        ruby_version: 2.5.1
        ruby_install_from_source: true
        ruby_download_url: "http://cache.ruby-lang.org/pub/ruby/2.5/ruby-2.5.1.tar.gz"
    - name: Install Node.js
      include_role:
        name: geerlingguy.nodejs
      vars:
        ansible_become: true
        nodejs_version: "8.x"
    - name: Configure the Yarn APT key
      become: true
      apt_key: url=https://dl.yarnpkg.com/debian/pubkey.gpg
    - name: Add Yarn repository
      become: true
      apt_repository:
        repo: 'deb https://dl.yarnpkg.com/debian/ stable main'
        state: present
    - name: Install Yarn
      become: true
      apt: pkg=yarn state=present update_cache=yes install_recommends=no

